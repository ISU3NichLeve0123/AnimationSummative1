<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAoHBwkHBgoJCAkLCwoMDxkQDw4ODx4WFxIZJCAmJSMgIyIo
        LTkwKCo2KyIjMkQyNjs9QEBAJjBGS0U+Sjk/QD3/2wBDAQsLCw8NDx0QEB09KSMpPT09PT09PT09PT09
        PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT3/wAARCACpAM0DASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDyXIpS1MzRk5qyh2TgUuc9aaXNN3UAPDYIpCfSgGkJoAUHmnYy
        c+lRgjNPU9aAAgUgODzSnFJkdqAHBsijJpgal60AKemCcUBZEQSFTsY4DY4NSWsazXCxuASwIQHoW7A+
        xNPgkka42udySf60HgbR/LHb06UwsRjkZzSPx1pMntTCc9TQAZp4NRmnZ4pAKTTc0Emm80AKMZGamRsH
        5SRUAIzUiHmgBXPzHnNNpGJ3nNNyaYD++aeGqIGlDfWi4rCYopaQ1Iw68UYo7UYwOtABmlB4pppQcEUA
        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
</value>
  </data>
</root>